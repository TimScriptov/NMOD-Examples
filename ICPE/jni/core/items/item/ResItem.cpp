#include "ResItem.h"

#include "items/ResItemAux.h"
#include "mcpe/client/resources/I18n.h"

std::vector<std::string> ResItem::mItemNameIDs=
{
	"crafting.circuit",
	"crafting.advanced_circuit",
	"crafting.electric_motor",
	"crafting.power_unit",
	"crafting.small_power_unit",
	"crafting.coil",
	"itemCoin",
	"crafting.scrap",
	"misc_resource.slag",
	"ingot.tin",
	"ingot.steel",
	"ingot.copper",
	"ingot.lead",
	"ingot.alloy",
	"ingot.bronze",
	"plate.bronze",
	"plate.copper",
	"plate.gold",
	"plate.iron",
	"plate.lapis",
	"plate.lead",
	"plate.obsidian",
	"plate.steel",
	"plate.tin",
	"plate.dense_bronze",
	"plate.dense_copper",
	"plate.dense_gold",
	"plate.dense_iron",
	"plate.dense_lapis",
	"plate.dense_lead",
	"plate.dense_obsidian",
	"plate.dense_steel",
	"plate.dense_tin",
	"dust.bronze",
	"dust.clay",
	"dust.coal",
	"dust.coal_fuel",
	"dust.copper",
	"dust.diamond",
	"dust.energium",
	"dust.gold",
	"dust.iron",
	"dust.lapis",
	"dust.lead",
	"dust.lithium",
	"dust.obsidian",
	"dust.silicon_dioxide",
	"dust.silver",
	"dust.stone",
	"dust.sulfur",
	"dust.tin",
	"dust.small_bronze",
	"dust.small_copper",
	"dust.small_gold",
	"dust.small_iron",
	"dust.small_lapis",
	"dust.small_lead",
	"dust.small_obsidian",
	"dust.small_lithium",
	"dust.small_sulfur",
	"dust.small_silver",
	"dust.small_tin",
	"tfbp.blank",
	"tfbp.chilling",
	"tfbp.cultivation",
	"tfbp.desertification",
	"tfbp.flatification",
	"tfbp.irrigation",
	"tfbp.mushroom",
	"crushed.copper",
	"crushed.gold",
	"crushed.iron",
	"crushed.lead",
	"crushed.silver",
	"crushed.tin",
	"crushed.uranium",
	"purified.copper",
	"purified.gold",
	"purified.iron",
	"purified.lead",
	"purified.silver",
	"purified.tin",
	"purified.uranium",
	"casing.bronze",
	"casing.copper",
	"casing.gold",
	"casing.iron",
	"casing.lead",
	"casing.steel",
	"casing.tin",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_ejector",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.fluid_pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.pulling",
	"upgrade.transformer",
	"upgrade.redstone_inverter",
	"upgrade.overclocker",
	"upgrade.energy_storage",
	"crafting.iron_rotor_blade",
	"crafting.iron_shaft",
	"misc_resource.iridium_ore",
	"misc_resource.iridium_shard",
	"crafting.iridium",
	"crafting.steel_rotor_blade",
	"crafting.steel_shaft",
	"block_cutting_blade.steel",
	"block_cutting_blade.iron",
	"block_cutting_blade.diamond",
	"crafting.wood_rotor_blade",
	"misc_resource.ashes",
	"crafting.alloy",
	"crafting.carbon_fibre",
	"crafting.carbon_mesh",
	"crafting.carbon_plate",
	"crafting.carbon_rotor_blade",
	"crafting.coal_ball",
	"crafting.coal_block",
	"crafting.coal_chunk",
	"crafting.bio_chaff",
	"crafting.cf_powder",
	"crafting.compressed_hydrated_coal",
	"crafting.copper_boiler",
	"crafting.heat_conductor",
	"crafting.pellet",
	"crafting.plant_ball",
	"crafting.rubber",
	"misc_resource.resin"
};

ResItem::ResItem():IC::Items("res",ID::mResources-0x100)
{
	setCategory(CreativeItemCategory::ITEMS);
	setMaxStackSize(64);
	setStackedByData(true);
}
std::string ResItem::buildDescriptionName(ItemInstance const&item) const
{
	return I18n::get(mItemNameIDs[item.aux%mItemNameIDs.size()]);
}
TextureUVCoordinateSet const& ResItem::getIcon(int aux, int i, bool b) const
{
	((Item*)this)->setIcon("icpe_res_item",aux);
	return Item::getIcon(aux,i,b);
}
