#pragma once
#include <string>
#include <memory>
#include <map>

#include "Json.h"

class ItemInstance;
class ItemStack;
class CreativeItemCategory;
class UseAnimation;
class Block;
class Level;
class CompoundTag;
class Player;
class BlockSource;
class Container;
class Mob;
class Vec3;
class Actor;
class IDataInput;
class ReadOnlyBinaryStream;
class IDataOutput;
class ItemDescriptor;
class TextureUVCoordinateSet;
class BlockPos;
class AtlasItemManager;
class ActorInfoRegistry;
class BlockDefinitionGroup;
class LevelData;
class TextureAtlasItem;
class ItemAcquisitionMethod;

class Item
{
public:
	char filler_Item[10086];
public:
	virtual ~Item();
	virtual void tearDown();
	virtual void getMaxUseDuration(ItemInstance const*) const;
	virtual void getMaxUseDuration(ItemStack const*) const;
	virtual void isExperimental(ItemInstance const*) const;
	virtual void setMaxStackSize(unsigned char);
	virtual void setCategory(CreativeItemCategory);
	virtual void setStackedByData(bool);
	virtual void setMaxDamage(int);
	virtual void setHandEquipped();
	virtual void setUseAnimation(UseAnimation);
	virtual void setMaxUseDuration(int);
	virtual void setRequiresWorldBuilder(bool);
	virtual void setExplodable(bool);
	virtual void setIsGlint(bool);
	virtual void setShouldDespawn(bool);
	virtual void getBlockShape() const;
	virtual void canBeDepleted() const;
	virtual void canDestroySpecial(Block const&) const;
	virtual void getLevelDataForAuxValue(int) const;
	virtual void isStackedByData() const;
	virtual void getMaxDamage() const;
	virtual void getAttackDamage() const;
	virtual void isHandEquipped() const;
	virtual void isArmor() const;
	virtual void isDye() const;
	virtual void isFertilizer(int) const;
	virtual void isGlint(ItemInstance const&) const;
	virtual void isGlint(ItemStack const&) const;
	virtual void isThrowable() const;
	virtual void isPattern() const;
	virtual void showsDurabilityInCreative() const;
	virtual void isWearableThroughLootTable(ItemStack const&) const;
	virtual void canDestroyInCreative() const;
	virtual void isDestructive(int) const;
	virtual void isLiquidClipItem(int) const;
	virtual void requiresInteract() const;
	virtual void appendFormattedHovertext(ItemStack const&, Level&, std::string&, bool) const;
	virtual void appendFormattedHovertext(ItemInstance const&, Level&, std::string&, bool) const;
	virtual void isValidRepairItem(ItemStack const&, ItemStack const&) const;
	virtual void getEnchantSlot() const;
	virtual void getEnchantValue() const;
	virtual void getArmorValue() const;
	virtual void isComplex() const;
	virtual void isValidAuxValue(int) const;
	virtual void getDamageChance(int) const;
	virtual void uniqueAuxValues() const;
	virtual void isMultiColorTinted(ItemStack const&) const;
	virtual void getColor(ItemInstance const&) const;
	virtual void getColor(ItemStack const&) const;
	virtual void getBaseColor(ItemStack const&) const;
	virtual void getSecondaryColor(ItemStack const&) const;
	virtual void saveAdditionalData(ItemInstance const&, CompoundTag&) const;
	virtual void saveAdditionalData(ItemStack const&, CompoundTag&) const;
	virtual void readAdditionalData(ItemStack&, CompoundTag const&) const;
	virtual void readAdditionalData(ItemInstance&, CompoundTag const&) const;
	virtual void isTintable() const;
	virtual void use(ItemStack&, Player&) const;
	virtual void dispense(BlockSource&, Container&, int, Vec3 const&, unsigned char) const;
	virtual void useTimeDepleted(ItemInstance&, Level*, Player*) const;
	virtual void useTimeDepleted(ItemStack&, Level*, Player*) const;
	virtual void releaseUsing(ItemInstance&, Player*, int) const;
	virtual void releaseUsing(ItemStack&, Player*, int) const;
	virtual void getDestroySpeed(ItemStack const&, Block const&) const;
	virtual void hurtEnemy(ItemInstance&, Mob*, Mob*) const;
	virtual void hurtEnemy(ItemStack&, Mob*, Mob*) const;
	virtual void mineBlock(ItemInstance&, Block const&, int, int, int, Actor*) const;
	virtual void mineBlock(ItemStack&, Block const&, int, int, int, Actor*) const;
	virtual void buildDescriptionId(ItemInstance const&) const;
	virtual void buildDescriptionId(ItemStack const&) const;
	virtual void buildEffectDescriptionName(ItemInstance const&) const;
	virtual void buildEffectDescriptionName(ItemStack const&) const;
	virtual void buildCategoryDescriptionName(ItemInstance const&) const;
	virtual void buildCategoryDescriptionName(ItemStack const&) const;
	virtual void readUserData(ItemInstance&, IDataInput&, ReadOnlyBinaryStream&) const;
	virtual void readUserData(ItemStack&, IDataInput&, ReadOnlyBinaryStream&) const;
	virtual void writeUserData(ItemInstance const&, IDataOutput&) const;
	virtual void writeUserData(ItemStack const&, IDataOutput&) const;
	virtual void getMaxStackSize(ItemDescriptor const&) const;
	virtual void inventoryTick(ItemStack&, Level&, Actor&, int, bool) const;
	virtual void refreshedInContainer(ItemStack&, Level&) const;
	virtual void refreshedInContainer(ItemInstance&, Level&) const;
	virtual void getCooldownType() const;
	virtual void getCooldownTime() const;
	virtual void fixupOnLoad(ItemInstance&) const;
	virtual void fixupOnLoad(ItemStack&) const;
	virtual void getDamageValue(ItemStack const&) const;
	virtual void getDamageValue(ItemInstance const&) const;
	virtual void setDamageValue(ItemStack&, short) const;
	virtual void setDamageValue(ItemInstance&, short) const;
	virtual void getInHandUpdateType(Player const&, ItemInstance const&, ItemInstance const&, bool, bool) const;
	virtual void getInHandUpdateType(Player const&, ItemStack const&, ItemStack const&, bool, bool) const;
	virtual void isSameItem(ItemInstance const&, ItemInstance const&) const;
	virtual void isSameItem(ItemStack const&, ItemStack const&) const;
	virtual void getInteractText(Player const&) const;
	virtual void getAnimationFrameFor(Mob*, bool, ItemStack const*, bool) const;
	virtual void isEmissive(int) const;
	virtual void getIcon(int, int, bool) const;
	virtual void getIconYOffset() const;
	virtual void setIcon(std::string const&, int);
	virtual void setIcon(TextureUVCoordinateSet const&);
	virtual void canBeCharged() const;
	virtual void playSoundIncrementally(ItemInstance const&, Mob&) const;
	virtual void playSoundIncrementally(ItemStack const&, Mob&) const;
	virtual void getAuxValuesDescription() const;
	virtual void _checkUseOnPermissions(Actor&, ItemInstance&, unsigned char const&, BlockPos const&) const;
	virtual void _checkUseOnPermissions(Actor&, ItemStack&, unsigned char const&, BlockPos const&) const;
	virtual void _calculatePlacePos(ItemInstance&, Actor&, unsigned char&, BlockPos&) const;
	virtual void _calculatePlacePos(ItemStack&, Actor&, unsigned char&, BlockPos&) const;
	virtual void _useOn(ItemInstance&, Actor&, BlockPos, unsigned char, float, float, float) const;
	virtual void _useOn(ItemStack&, Actor&, BlockPos, unsigned char, float, float, float) const;
public:
	Item(std::string const&, short);
	void setAtlasItemManager(std::shared_ptr<AtlasItemManager>);
	void isMirroredArt() const;
	void canUseSeed(Actor&, BlockPos, unsigned char) const;
	void getCamera() const;
	void addCreativeItem(ItemStack const&);
	void initCreativeItems(bool, ActorInfoRegistry*, BlockDefinitionGroup*, bool, std::function<void (ActorInfoRegistry*, BlockDefinitionGroup*, bool)>);
	void alterAvailableCreativeItems(ActorInfoRegistry*, LevelData&);
	void getRawNameId() const;
	void getSerializedName() const;
	void getFullName() const;
	void executeOnResetBAIcallbacks() const;
	void getFood() const;
	void findCreativeItem(ItemInstance const&);
	void getTextureItem(std::string const&);
	void updateCustomBlockEntityTag(BlockSource&, ItemStack&, BlockPos&) const;
	void getIconTextureUVSet(TextureAtlasItem const&, int, int);
	void setAllowOffhand(bool);
	void getDescriptionId() const;
	void _textMatch(std::string const&, std::string const&, bool);
	void initClient(Json::Value&, Json::Value&);
	void initServer(Json::Value&);
	void addCreativeItem(Item*, short);
	void addCreativeItem(ItemInstance const&);
	void addCreativeItem(Block const&);
	void addCreativeItem(short, short);
	void endCreativeGroup();
	void setIsMirroredArt(bool);
	void beginCreativeGroup(std::string const&, Block const*, CompoundTag const*);
	void beginCreativeGroup(std::string const&, Item*, short, CompoundTag const*);
	void beginCreativeGroup(std::string const&, ItemInstance const&);
	void beginCreativeGroup(std::string const&, short, short, CompoundTag const*);
	void addOnResetBAIcallback(std::function<void ()> const&);
	void getTextureUVCoordinateSet(std::string const&, int);
	void resetId(short);
	void toBlockId(short);
	void allowOffhand() const;
	void getNamespace() const;
	void getRendererId() const;
	void destroySpeedBonus(ItemStack const&) const;
	void buildDescriptionName(ItemInstance const&) const;
	void buildDescriptionName(ItemStack const&) const;
	void _helpChangeInventoryItemInPlace(Actor&, ItemStack&, ItemStack&, ItemAcquisitionMethod) const;
	void useOn(ItemStack&, Actor&, int, int, int, unsigned char, float, float, float) const;
	void getSeed() const;
public:
	static Item * mCreativeList;
	static Item * mCreativeListMutex;
	static Item * mCreativeListStack;
	static Item * mCreativeGroups;
	static Item * mCreativeGroupInfo;
	static Item * mGenerateDenyParticleEffect;
	static Item * mInvalidTextureUVCoordinateSet;
	static Item * TAG_DAMAGE;
	static Item * mInCreativeGroup;
	static Item * mItemTextureItems;
	static Item * mAllowExperimental;
	static Item * ICON_DESCRIPTION_PREFIX;
};//Item
